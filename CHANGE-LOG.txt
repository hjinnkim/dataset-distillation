2023-08-10:
    -----------------------------------------------------------------------------------------------------
    base_options.py :
        abstract:
            Add Cifar10_simCLR to dataset options
        from:
            parser.add_argument('--dataset', type=str, default='MNIST',
                                help='dataset: MNIST | Cifar10 | PASCAL_VOC | CUB200')
        to:
            parser.add_argument('--dataset', type=str, default='MNIST',
                                help='dataset: MNIST | Cifar10 | PASCAL_VOC | CUB200 | Cifar10_simCLR')

    datasets/__init__.py
        abstract:
            Add Cifar10_simCLR dataset options
        add:
            in:
                default_dataset_roots
            content:
                Cifar10_simCLR='./data/cifar10',
        add:
            in:
                dataset_normalization
            content:
                Cifar10_simCLR=((0, 0, 0), (1., 1., 1.),)
        add:
            in:
                dataset_labels
            content:
                Cifar10_simCLR=('plane', 'car', 'bird', 'cat',
                        'deer', 'dog', 'monkey', 'horse', 'ship', 'truck'),
        add:
            in:
                dataset_stats
            content:
                Cifar10_simCLR=DatasetStats(3, 32, 10),
        add:
            in:
                get_dataset
            content:
                elif name == 'Cifar10_simCLR':
                    from simclr.modules.transformations import TransformsSimCLR
                    if phase == 'train':
                        transform = TransformsSimCLR(input_size)
                    else:
                        transform = transforms.Compose([transforms.Resize(input_size),
                                                        transforms.ToTensor()])
                        
                    with suppress_stdout():
                        return datasets.CIFAR10(root, phase == 'train', transform, download=True)
    -----------------------------------------------------------------------------------------------------
    base_options.py :
        abstract:
            Add ResNet%%SimCLR networks options
        from:
            parser.add_argument('--arch', type=str, default='LeNet',
                            help='architecture: LeNet | AlexNet | etc.')
        to:
            parser.add_argument('--arch', type=str, default='LeNet',
                            help='architecture: LeNet | AlexNet | ResNet18SimCLR | ResNet50SimCLR | etc.')

    networks/networks.py
        abstract:
            Add ResNet18SimCLR, ResNet50SimCLR
        add:
            class ResNet18SimCLR(utils.ReparamModule):
                supported_dims = {32, 224}

                def __init__(self, state):
                    super(ResNet18SimCLR, self).__init__()
                    self.use_dropout = state.dropout
                    assert state.nc == 3 or state.nc == 1, "AlexNet only supports nc = 1 or 3"
                    
                    from simclr import SimCLR
                    from simclr.modules import get_resnet
                    
                    # initialize ResNet
                    encoder = get_resnet("resnet18", pretrained=False)
                    n_features = encoder.fc.in_features  # get dimensions of fc layer
                    self.features = SimCLR(encoder, 64, n_features)
                    
                def forward(self, x):
                    x_i, x_j = x
                    h_i, h_j, z_i, z_j = self.features(x_i, x_j)
                    return h_i, h_j, z_i, z_j
                
            class ResNet50SimCLR(utils.ReparamModule):
                supported_dims = {32, 224}

                def __init__(self, state):
                    super(ResNet18SimCLR, self).__init__()
                    self.use_dropout = state.dropout
                    assert state.nc == 3 or state.nc == 1, "AlexNet only supports nc = 1 or 3"
                    
                    from simclr import SimCLR
                    from simclr.modules import get_resnet
                    
                    # initialize ResNet
                    encoder = get_resnet("resnet50", pretrained=False)
                    n_features = encoder.fc.in_features  # get dimensions of fc layer
                    self.features = SimCLR(encoder, 128, n_features)
                    
                def forward(self, x):
                    x_i, x_j = x
                    h_i, h_j, z_i, z_j = self.features(x_i, x_j)
                    return h_i, h_j, z_i, z_j

2023-08-12:
    -----------------------------------------------------------------------------------------------------